module clk_scaler(clk,clk_7);
  input clk;
output reg clk_7;
reg[17:0] cnt;

initial begin
  cnt<= 0;
  clk<= 0;
end 
always@(posedge clk) begin
if (cnt==100000) begin
  cnt<= 0;
  clk_7 <= !clk_7;
end
else
  cnt<= cnt+1;
end
end
endmodule

module chang_pos(clk_7,pos);
input clk_7;
output reg[3:0] pos;
initial begin
  pos <= 1;
end
always@(posedge clk_7)begin
  if (pos==8) pos<=1;
  else
      pos<= pos+1;
 end
 endmodule
 module display_dig(clk_7,digit,pos,anode,seg);
  input clk_7;
  input [3:0]pos;
  input [3:0]digit;
  output reg[7:0] anode;
  output reg[7:0] seg;
  
  initial begin
    anode<=8'b11111111;
    seg<= 7'b1111111;
  end
  always@(posedge clk_7)begin
  case(digit)
  0: seg = 7'b1000000;
  1: seg = 7'b1111001;
  2: seg = 7'b0100101;
  3: seg = 7'b0110000;  
  4: seg = 7'b0011001;  
  5: seg = 7'b0010010;
  6: seg = 7'b0000010;  
  7: seg = 7'b1111000; 
  8: seg = 7'b0000000; 
  9: seg = 7'b0010000; 
  endcase
  
  case(pos)
  1: anode = 8'b11111110;
  2: anode = 8'b11111101;  
  3: anode = 8'b11111011; 
  4: anode = 8'b11110111;  
  5: anode = 8'b11101111;  
  6: anode = 8'b11011111;  
  7: anode = 8'b10111111;  
  8: anode = 8'b01111111; 
  endcase
 end
 endmodule
 module get_digit(clk_7,num,pos,digit);
 input clk_7;
 input [3:0]pos;
 input [15:0]num; 
 input [3:0]digit;  
 reg [15:0] temp;
 int i;
 always@ (posedge clk_7)begin
  temp =num;
  for(i=0; i<pos, i=i+1) begin
   temp =temp/10;
  end
  digit =temp%10;
 end
 endmodule
 
  
